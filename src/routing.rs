// üì° –ó–≤—ë–∑–¥–Ω—ã–π –º–∞—Ä—à—Ä—É—Ç–∏–∑–∞—Ç–æ—Ä –∫–æ—Å–º–æ–ø–æ—Ä—Ç–∞ YUAI! –ü—Ä–æ–∫–ª–∞–¥—ã–≤–∞–µ–º –∫—É—Ä—Å —á–µ—Ä–µ–∑ –≥–∞–ª–∞–∫—Ç–∏–∫—É –¥–ª—è –≤—Å–µ—Ö –ø—Ä–æ—Ç–æ–∫–æ–ª–æ–≤!
// –ü–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç:
// - HTTP/1, HTTP/2 ‚Äî —á–µ—Ä–µ–∑ handle_route(Request<Incoming>), –∫–∞–∫ —à–ª—é–ø–∫–∏ –≤ –∫–æ—Å–º–æ—Å–µ!
// - HTTP/3 (QUIC) ‚Äî —á–µ—Ä–µ–∑ resolve_route(path, state), –≤—Ä—É—á–Ω—É—é, –∫–∞–∫ –∑–≤–µ–∑–¥–æ–ª—ë—Ç—ã!
// - WebSocket ‚Äî resolve_route –¥–æ upgrade –∏–ª–∏ –≤ –º–æ–º–µ–Ω—Ç —Ä—É–∫–æ–ø–æ–∂–∞—Ç–∏—è, –∫–∞–∫ –º–∞—è–∫ –¥–ª—è —é–Ω–≥!
// - WebRTC ‚Äî resolve_route –ø–æ –º–∞—Ä—à—Ä—É—Ç—É –¥–æ –æ–±—Ä–∞–±–æ—Ç–∫–∏ SDP, –∫–∞–∫ —Å–∏–≥–Ω–∞–ª –≤ —Ç—É–º–∞–Ω–Ω–æ—Å—Ç–∏!
// - QUIC (raw) ‚Äî resolve_route –≤—Ä—É—á–Ω—É—é –ø–æ URI –∏–ª–∏ –∫–æ–Ω—Ç–µ–∫—Å—Ç—É, –∫–∞–∫ –¥—Ä–µ–≤–Ω—è—è –∫–∞—Ä—Ç–∞!

use bytes::Bytes; // –¶–∏—Ñ—Ä–æ–≤–æ–µ –∑–æ–ª–æ—Ç–æ, –∑–≤–µ–Ω–∏—Ç –≤ —Ç—Ä—é–º–µ!
use hyper::{Request, Response, StatusCode, header, Error as HyperError}; // –î–≤–∏–≥–∞—Ç–µ–ª—å HTTP, –∑–∞–ø—Ä–æ—Å—ã –∏ –ø—É—à–∫–∏!
use http_body_util::Full; // –£–ø–∞–∫–æ–≤–∫–∞ –≥—Ä—É–∑–æ–≤ –≤ —Ç—Ä—é–º!
use std::sync::Arc; // –û–±—â–∏–π —à—Ç—É—Ä–≤–∞–ª –¥–ª—è —é–Ω–≥, —á—Ç–æ–± –¥–µ—Ä–∂–∞–ª–∏ –∫—É—Ä—Å!
use std::time::{Duration, Instant, SystemTime}; // –ß–∞—Å—ã –∫–∞–ø–∏—Ç–∞–Ω–∞, –æ—Ç—Å—á–∏—Ç—ã–≤–∞–µ–º –≤—Ä–µ–º—è –¥–æ —à—Ç–æ—Ä–º–∞!
use std::collections::HashMap; // –°—É–Ω–¥—É–∫ –¥–ª—è —Ç–æ—á–Ω—ã—Ö –º–∞—Ä—à—Ä—É—Ç–æ–≤!
use tokio::fs::File; // –°–≤–∏—Ç–æ–∫ —Å –¥–æ–±—ã—á–µ–π, —á–∏—Ç–∞–µ–º –∏–∑ —Ç—Ä—é–º–∞!
use tokio::io::AsyncReadExt; // –ß–∏—Ç–∞–µ–º –¥–æ–±—ã—á—É, –∫–∞–∫ –¥—Ä–µ–≤–Ω–∏–µ –∫–∞—Ä—Ç—ã!
use crate::{ProxyState, Config, Location}; // –®—Ç—É—Ä–≤–∞–ª –∫–æ—Å–º–æ–ø–æ—Ä—Ç–∞, –∑–≤—ë–∑–¥–Ω–∞—è –∫–∞—Ä—Ç–∞ –∏ –∑–≤—ë–∑–¥—ã!
use crate::adapters::build_response; // –°–æ–±–∏—Ä–∞–µ–º –æ—Ç–≤–µ—Ç, –∫–∞–∫ –ø–æ—Å–ª–∞–Ω–∏–µ –≤ –±—É—Ç—ã–ª–∫–µ!
use matchit::Router as TrieRouter; // –î—Ä–µ–≤–æ –º–∞—Ä—à—Ä—É—Ç–æ–≤, –∫–∞–∫ –∑–≤—ë–∑–¥–Ω–∞—è –∫–∞—Ä—Ç–∞ —Å –≤–µ—Ç–≤—è–º–∏!

// –ú–∞—Ä—à—Ä—É—Ç–∏–∑–∞—Ç–æ—Ä ‚Äî –∫–æ–º–ø–∞—Å –∫–æ—Å–º–æ–ø–æ—Ä—Ç–∞, —É–∫–∞–∑—ã–≤–∞–µ—Ç –ø—É—Ç—å –∫ –∑–≤—ë–∑–¥–∞–º!
#[derive(Clone)]
pub struct Router {
    exact: HashMap<String, Location>, // –¢–æ—á–Ω—ã–µ –∑–≤—ë–∑–¥—ã, –ø—Ä—è–º–æ–π –∫—É—Ä—Å!
    prefixes: TrieRouter<Location>, // –ü—Ä–µ—Ñ–∏–∫—Å—ã, –∫–∞–∫ —Ç—É–º–∞–Ω–Ω–æ—Å—Ç–∏ —Å –ø—É—Ç—è–º–∏!
    static_extensions: Vec<String>, // –ú–µ—Ç–∫–∏ –¥–ª—è —Å—Ç–∞—Ç–∏—á–Ω—ã—Ö –≥—Ä—É–∑–æ–≤, –∫–∞–∫ —Ä–æ–º –≤ –±–æ—á–∫–∞—Ö!
}

impl Router {
    // –°–æ–∑–¥–∞—ë–º –Ω–æ–≤—ã–π –∫–æ–º–ø–∞—Å, –ø—Ä–æ–∫–ª–∞–¥—ã–≤–∞–µ–º –º–∞—Ä—à—Ä—É—Ç—ã –ø–æ –∑–≤—ë–∑–¥–Ω–æ–π –∫–∞—Ä—Ç–µ!
    pub fn new(locations: Vec<Location>, config: &Config) -> Self {
        let mut exact = HashMap::new(); // –°—É–Ω–¥—É–∫ –¥–ª—è —Ç–æ—á–Ω—ã—Ö –∑–≤—ëzd!
        let mut prefixes = TrieRouter::new(); // –î—Ä–µ–≤–æ –¥–ª—è —Ç—É–º–∞–Ω–Ω–æ—Å—Ç–µ–π!

        // –î–æ—Å—Ç–∞—ë–º –º–µ—Ç–∫–∏ –¥–ª—è —Å—Ç–∞—Ç–∏—á–Ω—ã—Ö –≥—Ä—É–∑–æ–≤ –∏–∑ –∫–∞—Ä—Ç—ã!
        let static_extensions = config.static_settings
            .as_ref()
            .and_then(|s| s.static_extensions.clone())
            .unwrap_or_default();

        // –†–∞—Å–ø—Ä–µ–¥–µ–ª—è–µ–º –∑–≤—ë–∑–¥—ã –ø–æ —Å—É–Ω–¥—É–∫–∞–º –∏ –≤–µ—Ç–≤—è–º!
        for loc in locations {
            if loc.route_type.as_deref() == Some("static") && loc.path.ends_with("/*") {
                let prefix = loc.path.trim_end_matches("/*").to_string(); // –û–±—Ä–µ–∑–∞–µ–º –∑–≤—ë–∑–¥–Ω—ã–π —à–ª–µ–π—Ñ!
                let _ = prefixes.insert(&prefix, loc.clone()); // –í–µ—Ç–≤—å –≤ –¥—Ä–µ–≤–µ!
            } else {
                exact.insert(loc.path.clone(), loc); // –¢–æ—á–Ω–∞—è –∑–≤–µ–∑–¥–∞ –≤ —Å—É–Ω–¥—É–∫–µ!
            }
        }

        Router {
            exact, // –°—É–Ω–¥—É–∫ –≥–æ—Ç–æ–≤!
            prefixes, // –î—Ä–µ–≤–æ —Ä–∞—Å—Ü–≤–µ–ª–æ!
            static_extensions, // –ú–µ—Ç–∫–∏ –¥–ª—è —Ä–æ–º–∞!
        }
    }

    // –ò—â–µ–º –∑–≤–µ–∑–¥—É –ø–æ –∫—É—Ä—Å—É, —Ç–æ—á–Ω—É—é –∏–ª–∏ –≤ —Ç—É–º–∞–Ω–Ω–æ—Å—Ç–∏!
    pub fn find(&self, path: &str) -> Option<&Location> {
        if let Some(loc) = self.exact.get(path) {
            return Some(loc); // –ü—Ä—è–º–æ –≤ —è–±–ª–æ—á–∫–æ, –∑–≤–µ–∑–¥–∞ –Ω–∞–π–¥–µ–Ω–∞!
        }
        if let Ok(matched) = self.prefixes.at(path) {
            if self.is_static_file(path) {
                return Some(matched.value); // –ù–∞—à–ª–∏ –≤ —Ç—É–º–∞–Ω–Ω–æ—Å—Ç–∏, –≥—Ä—É–∑ —Å—Ç–∞—Ç–∏—á–Ω—ã–π!
            }
        }
        None // –ó–≤–µ–∑–¥–∞ –ø–æ—Ç–µ—Ä—è–Ω–∞ –≤ –∫–æ—Å–º–æ—Å–µ!
    }

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —Å—Ç–∞—Ç–∏—á–Ω—ã–π –ª–∏ –≥—Ä—É–∑, –∫–∞–∫ —Ä–æ–º –≤ –±–æ—á–∫–µ!
    pub fn is_static_file(&self, path: &str) -> bool {
        self.static_extensions
            .iter()
            .any(|ext| path.ends_with(&format!(".{}", ext))) // –ï—Å—Ç—å –º–µ—Ç–∫–∞? –≠—Ç–æ —Ä–æ–º!
    }
}

// –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –∑–∞–ø—Ä–æ—Å, –ø—Ä–æ–∫–ª–∞–¥—ã–≤–∞–µ–º –∫—É—Ä—Å —á–µ—Ä–µ–∑ –≥–∞–ª–∞–∫—Ç–∏–∫—É!
pub async fn handle_route(
    req: Request<hyper::body::Incoming>, // –ó–∞–ø—Ä–æ—Å, –∫–∞–∫ –ø–æ—Å–ª–∞–Ω–∏–µ –≤ –±—É—Ç—ã–ª–∫–µ!
    state: Arc<ProxyState>, // –®—Ç—É—Ä–≤–∞–ª –∫–æ—Å–º–æ–ø–æ—Ä—Ç–∞!
    _client_ip: Option<std::net::IpAddr>, // –ö–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã –≥–æ—Å—Ç—è, –ø–æ–∫–∞ –Ω–µ –Ω—É–∂–Ω—ã!
) -> Result<Response<Full<Bytes>>, HyperError> {
    let cache_key = format!("{}:{}", req.method(), req.uri()); // –ö–ª—é—á –¥–ª—è —Å—É–Ω–¥—É–∫–∞ —Å –¥–æ–±—ã—á–µ–π!
    if let Some(entry) = state.cache.get(&cache_key) {
        if entry.expiry > Instant::now() {
            return Ok(Response::new(Full::new(Bytes::from(entry.response_body.clone())))); // –î–æ–±—ã—á–∞ —Å–≤–µ–∂–∞—è, –≤—ã–¥–∞—ë–º!
        }
    }

    let config = state.config.read().await; // –î–æ—Å—Ç–∞—ë–º –∑–≤—ë–∑–¥–Ω—É—é –∫–∞—Ä—Ç—É!
    let router = Router::new(config.locations.clone(), &*config); // –°–æ–∑–¥–∞—ë–º –∫–æ–º–ø–∞—Å!
    let path = req.uri().path(); // –ö—É—Ä—Å, –∫—É–¥–∞ –ª–µ—Ç–∏–º!
    let fallback_location = Location {
        path: "/".into(), // –ó–∞–ø–∞—Å–Ω–æ–π –ø–æ—Ä—Ç!
        response: "404 ‚Äî –∑–≤–µ–∑–¥–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞!".into(), // –ß—ë—Ä–Ω–∞—è –¥—ã—Ä–∞!
        headers: None, // –ë–µ–∑ –ø–∞—Ä—É—Å–æ–≤!
        route_type: None, // –ë–µ–∑ –º–µ—Ç–∫–∏!
        csp: None, // –ë–µ–∑ –±—Ä–æ–Ω–∏!
    };
    let location = router.find(path).cloned().unwrap_or(fallback_location); // –ò—â–µ–º –∑–≤–µ–∑–¥—É –∏–ª–∏ —á—ë—Ä–Ω—É—é –¥—ã—Ä—É!

    match location.route_type.as_deref() {
        Some("static") if router.is_static_file(path) => {
            let file_path = path.trim_start_matches('/'); // –û–±—Ä–µ–∑–∞–µ–º —à–ª–µ–π—Ñ –ø—É—Ç–∏!
            let mut file = match File::open(file_path).await {
                Ok(f) => f, // –°–≤–∏—Ç–æ–∫ —Å –¥–æ–±—ã—á–µ–π –æ—Ç–∫—Ä—ã—Ç!
                Err(_) => {
                    let body = Bytes::from("File not found"); // –°–≤–∏—Ç–æ–∫ –ø—Ä–æ–ø–∞–ª!
                    return build_response(StatusCode::NOT_FOUND, body, None);
                }
            };

            let mut response = Response::builder().status(StatusCode::OK); // –ì–æ—Ç–æ–≤–∏–º –ø–æ—Å–ª–∞–Ω–∏–µ!
            if let Some(headers) = &location.headers {
                for (name, value) in headers {
                    response = response.header(name.as_str(), value.as_str()); // –î–æ–±–∞–≤–ª—è–µ–º –ø–∞—Ä—É—Å–∞!
                }
            }

            // –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ç–∏–ø –¥–æ–±—ã—á–∏, –∫–∞–∫ —Ä–æ–º –∏–ª–∏ –∑–æ–ª–æ—Ç–æ!
            let content_type = match path.rsplit('.').next() {
                Some("html") => "text/html",
                Some("css") => "text/css",
                Some("js") => "application/javascript",
                Some("png") => "image/png",
                Some("jpg" | "jpeg") => "image/jpeg",
                _ => "application/octet-stream",
            };
            response = response.header(header::CONTENT_TYPE, content_type); // –ú–µ—Ç–∫–∞ –¥–æ–±—ã—á–∏!

            let mut buffer = Vec::new(); // –¢—Ä—é–º –¥–ª—è –¥–æ–±—ã—á–∏!
            if let Err(_) = file.read_to_end(&mut buffer).await {
                let body = Bytes::from("File read error"); // –®—Ç–æ—Ä–º –≤ —Ç—Ä—é–º–µ!
                return build_response(StatusCode::INTERNAL_SERVER_ERROR, body, None);
            }
            let body = Bytes::from(buffer); // –î–æ–±—ã—á–∞ –≤ —Ç—Ä—é–º–µ!
            match response.body(Full::new(body)) {
                Ok(resp) => Ok(resp), // –ü–æ—Å–ª–∞–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ!
                Err(_) => build_response(StatusCode::INTERNAL_SERVER_ERROR, Bytes::from("Response build error"), None), // –®—Ç–æ—Ä–º –≤ —ç—Ñ–∏—Ä–µ!
            }
        }

        Some("proxy") => {
            let msg = "Proxy not implemented yet, sailor! Rust lacks a universal reverse proxy."; // –ü—Ä–æ–∫—Å–∏-–º–∞—è–∫ –µ—â—ë –Ω–µ –∑–∞–∂–∂—ë–Ω!
            build_response(StatusCode::NOT_IMPLEMENTED, Bytes::from(msg), None)
        }

        Some("microservice") => {
            let response_bytes = Bytes::from(location.response.clone()); // –î–æ–±—ã—á–∞ –∏–∑ –º–∏–∫—Ä–æ—Å–ª—É–∂–±—ã!
            state.cache.insert(cache_key.clone(), crate::CacheEntry {
                response_body: response_bytes.to_vec(), // –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ —Å—É–Ω–¥—É–∫!
                expiry: Instant::now() + Duration::from_secs(60), // –î–æ–±—ã—á–∞ —Å–≤–µ–∂–∞ 60 —Å–µ–∫—É–Ω–¥!
            });
            build_response(StatusCode::OK, response_bytes, location.headers.clone()) // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –¥–æ–±—ã—á—É!
        }

        Some("dynamic") => {
            let now = SystemTime::now()
                .duration_since(SystemTime::UNIX_EPOCH)
                .map(|d| d.as_secs())
                .unwrap_or(0); // –¢–µ–∫—É—â–µ–µ –≤—Ä–µ–º—è, –∫–∞–∫ –∑–≤–µ–∑–¥–∞ –Ω–∞ –Ω–µ–±–µ!
            let response_bytes = Bytes::from(format!("Dynamic time: {}", now)); // –î–∏–Ω–∞–º–∏—á–µ—Å–∫–∞—è –¥–æ–±—ã—á–∞!
            state.cache.insert(cache_key.clone(), crate::CacheEntry {
                response_body: response_bytes.to_vec(), // –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ —Å—É–Ω–¥—É–∫!
                expiry: Instant::now() + Duration::from_secs(60), // –î–æ–±—ã—á–∞ —Å–≤–µ–∂–∞ 60 —Å–µ–∫—É–Ω–¥!
            });
            build_response(StatusCode::OK, response_bytes, location.headers.clone()) // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –¥–æ–±—ã—á—É!
        }

        _ => {
            let response_bytes = Bytes::from(location.response.clone()); // –î–æ–±—ã—á–∞ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é!
            state.cache.insert(cache_key.clone(), crate::CacheEntry {
                response_body: response_bytes.to_vec(), // –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ —Å—É–Ω–¥—É–∫!
                expiry: Instant::now() + Duration::from_secs(60), // –î–æ–±—ã—á–∞ —Å–≤–µ–∂–∞ 60 —Å–µ–∫—É–Ω–¥!
            });
            build_response(StatusCode::OK, response_bytes, location.headers.clone()) // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –¥–æ–±—ã—á—É!
        }
    }
}

// –ü—Ä–æ–∫–ª–∞–¥—ã–≤–∞–µ–º –∫—É—Ä—Å –≤—Ä—É—á–Ω—É—é, –∫–∞–∫ –ø–æ –∑–≤—ë–∑–¥–Ω–æ–π –∫–∞—Ä—Ç–µ!
pub async fn resolve_route(path: &str, state: &Arc<ProxyState>) -> Option<Location> {
    let config = state.config.read().await; // –î–æ—Å—Ç–∞—ë–º –∑–≤—ë–∑–¥–Ω—É—é –∫–∞—Ä—Ç—É!
    let router = Router::new(config.locations.clone(), &*config); // –°–æ–∑–¥–∞—ë–º –∫–æ–º–ø–∞—Å!
    router.find(path).cloned() // –ò—â–µ–º –∑–≤–µ–∑–¥—É –∏ –≤–æ–∑–≤—Ä–∞—â–∞–µ–º –µ—ë –∫–æ–ø–∏—é!
}
